#!/bin/bash

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AGENT_SCRIPT="$SCRIPT_DIR/pankha-agent/pankha-agent.py"
CONFIG_FILE="/$SCRIPT_DIR/pankha-agent/config/config.json"
CONFIG_DIR="/$SCRIPT_DIR/pankha-agent/config"
LOG_FILE="/var/log/pankha-agent/agent.log"
LOG_DIR="/var/log/pankha-agent"
PID_FILE="/run/pankha-agent/pankha-agent.pid"
PID_DIR="/run/pankha-agent"
SYSTEMD_SERVICE="/etc/systemd/system/pankha-agent.service"

# Colors for output
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m" # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

create_directories() {
    # Create necessary directories
    mkdir -p "$CONFIG_DIR" "$LOG_DIR" "$PID_DIR"
    
    # Set appropriate permissions
    chmod 755 "$CONFIG_DIR" "$LOG_DIR" "$PID_DIR"
}

get_pid() {
    if [[ -f "$PID_FILE" ]]; then
        cat "$PID_FILE"
    else
        echo ""
    fi
}

is_running() {
    local pid=$(get_pid)
    if [[ -n "$pid" ]] && kill -0 "$pid" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Interactive setup function
interactive_setup() {
    log_header "Pankha Agent Interactive Setup"
    
    create_directories
    
    echo "This will guide you through configuring your Pankha agent."
    echo ""
    
    # Get current settings or defaults
    local current_server="ws://192.168.100.237:3000/websocket"
    local current_interval="10"
    local current_name="$(hostname)"
    local current_fan_control="true"
    
    if [[ -f "$CONFIG_FILE" ]]; then
        log_info "Found existing configuration file"
        current_server=$(python3 -c "
import json, sys
try:
    with open(\"$CONFIG_FILE\") as f: config = json.load(f)
    print(config.get(\"backend\", {}).get(\"server_url\", \"$current_server\"))
except: print(\"$current_server\")
" 2>/dev/null)
        current_interval=$(python3 -c "
import json, sys
try:
    with open(\"$CONFIG_FILE\") as f: config = json.load(f)
    print(config.get(\"agent\", {}).get(\"update_interval\", \"$current_interval\"))
except: print(\"$current_interval\")
" 2>/dev/null)
    fi
    
    # Server URL
    echo -n "Enter Pankha server address [$current_server]: "
    read server_input
    server_url=${server_input:-$current_server}
    
    # Update interval
    echo -n "Enter update interval in seconds [$current_interval]: "
    read interval_input
    update_interval=${interval_input:-$current_interval}
    
    # Agent name
    echo -n "Enter agent name [$current_name]: "
    read name_input
    agent_name=${name_input:-$current_name}
    
    # Fan control
    echo -n "Enable fan control? [Y/n]: "
    read fan_input
    if [[ "" =~ ^[Nn] ]]; then
        fan_control="false"
    else
        fan_control="true"
    fi
    
    # Fan safety minimum
    echo -n "Fan safety minimum percentage (0-100%, default 30, 0=allow stop): "
    read fan_min_input
    fan_min=${fan_min_input:-30}
    
    # Warn if user sets to 0
    if [[ "" -eq 0 ]]; then
        echo "⚠️  WARNING: Fans can completely stop. Ensure adequate passive cooling!"
        echo -n "Are you sure? [y/N]: "
        read confirm
        [[ ! "" =~ ^[Yy] ]] && fan_min=30
    fi
    
    # Create configuration
    log_info "Creating configuration..."
    cat > "$CONFIG_FILE" << EOL
{
  "agent": {
    "id": "linux-agent-$(hostname)",
    "name": "$agent_name",
    "update_interval": $update_interval,
    "log_level": "INFO"
  },
  "backend": {
    "server_url": "$server_url",
    "reconnect_interval": 30.0,
    "max_reconnect_attempts": -1,
    "connection_timeout": 10.0
  },
  "hardware": {
    "enable_fan_control": $fan_control,
    "enable_sensor_monitoring": true,
    "fan_safety_minimum": ,
    "temperature_critical": 85.0
  },
  "logging": {
    "enable_file_logging": true,
    "log_file": "$LOG_FILE",
    "max_log_size_mb": 10,
    "log_retention_days": 7
  }
}
EOL
    
    chmod 644 "$CONFIG_FILE"
    log_info "Configuration saved to $CONFIG_FILE"
    
    # Test the configuration
    echo ""
    echo "Testing configuration..."
    test_connection_internal
    
    echo ""
    log_info "Setup complete! You can now:"
    echo "  - Start the agent: pankha-agent.sh start"
    echo "  - Edit config: pankha-agent.sh config"
    echo "  - Test connection: pankha-agent.sh test-connection"
}

# Config file editor
config_editor() {
    log_header "Pankha Agent Configuration Editor"
    
    create_directories
    
    # Create default config if it doesn""t exist
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_info "Creating default configuration file..."
        interactive_setup
        return
    fi
    
    log_info "Opening configuration file: $CONFIG_FILE"
    echo "Save and exit when done editing."
    echo ""
    
    # Use the best available editor
    if command -v nano >/dev/null 2>&1; then
        nano "$CONFIG_FILE"
    elif command -v vi >/dev/null 2>&1; then
        vi "$CONFIG_FILE"
    else
        log_error "No text editor found (nano or vi required)"
        return 1
    fi
    
    # Validate the configuration
    log_info "Validating configuration..."
    if python3 "$SCRIPT_DIR/config.py" validate >/dev/null 2>&1; then
        log_info "Configuration is valid"
    else
        log_warn "Configuration validation failed. Please check syntax."
    fi
}

# Test connection function
test_connection() {
    log_header "Pankha Agent Connection Test"
    test_connection_internal
}

test_connection_internal() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Configuration file not found. Run: pankha-agent.sh setup"
        return 1
    fi
    
    log_info "Testing hardware discovery..."
    cd "$SCRIPT_DIR"
    
    # Test sensor discovery
    if python3 sensor_discovery.py >/dev/null 2>&1; then
        sensors_count=$(python3 sensor_discovery.py 2>/dev/null | jq -r ".sensor_count" 2>/dev/null || echo "?")
        log_info "✓ Discovered $sensors_count temperature sensors"
    else
        log_warn "✗ Sensor discovery failed"
    fi
    
    # Test fan control
    if python3 fan_control.py >/dev/null 2>&1; then
        fans_count=$(python3 fan_control.py 2>/dev/null | jq -r ".fan_count" 2>/dev/null || echo "?")
        log_info "✓ Discovered $fans_count controllable fans"
    else
        log_warn "✗ Fan control discovery failed"
    fi
    
    # Test system info
    if python3 system_info.py >/dev/null 2>&1; then
        cpu_model=$(python3 system_info.py 2>/dev/null | jq -r ".cpu.model_name" 2>/dev/null || echo "Unknown")
        log_info "✓ System: $cpu_model"
    else
        log_warn "✗ System information gathering failed"
    fi
    
    # Test server connection
    log_info "Testing server connection..."
    server_url=$(python3 -c "
import json
try:
    with open(\"$CONFIG_FILE\") as f: config = json.load(f)
    print(config.get(\"backend\", {}).get(\"server_url\", \"unknown\"))
except: print(\"unknown\")
" 2>/dev/null)
    
    if [[ "$server_url" != "unknown" ]]; then
        # Extract host and port from WebSocket URL
        host=$(echo "$server_url" | sed -E "s#ws://([^/:]+).*#\1#")
        port=$(echo "$server_url" | sed -E "s#ws://[^:]+:([0-9]+).*#\1#")
        
        if timeout 5 bash -c "</dev/tcp/$host/$port" 2>/dev/null; then
            log_info "✓ Server is reachable at $host:$port"
        else
            log_warn "✗ Cannot reach server at $host:$port"
        fi
    else
        log_warn "✗ Invalid server URL in configuration"
    fi
}

# Start function
start_agent() {
    log_header "Starting Pankha Agent"
    
    if is_running; then
        log_warn "Agent is already running (PID: $(get_pid))"
        return 1
    fi
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Configuration file not found. Run: pankha-agent.sh setup"
        return 1
    fi
    
    create_directories
    
    # Start the agent
    cd "$SCRIPT_DIR"
    nohup python3 "$AGENT_SCRIPT" > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # Save PID
    echo $pid > "$PID_FILE"
    
    # Wait a moment to check if it started successfully
    sleep 2
    if is_running; then
        log_info "Agent started successfully (PID: $pid)"
        log_info "Logs: tail -f $LOG_FILE"
    else
        log_error "Failed to start agent. Check logs: $LOG_FILE"
        return 1
    fi
}

# Stop function
stop_agent() {
    log_header "Stopping Pankha Agent"
    
    if ! is_running; then
        log_warn "Agent is not running"
        return 1
    fi
    
    local pid=$(get_pid)
    log_info "Stopping agent (PID: $pid)"
    
    # Send SIGTERM
    kill "$pid" 2>/dev/null
    
    # Wait for graceful shutdown
    for i in {1..10}; do
        if ! is_running; then
            break
        fi
        sleep 1
    done
    
    # Force kill if necessary
    if is_running; then
        log_warn "Force killing agent"
        kill -9 "$pid" 2>/dev/null
    fi
    
    # Clean up PID file
    rm -f "$PID_FILE"
    log_info "Agent stopped"
}

# Status function
status_agent() {
    log_header "Pankha Agent Status"
    
    if is_running; then
        local pid=$(get_pid)
        log_info "Agent is running (PID: $pid)"
        
        # Show some runtime info
        if [[ -f "$LOG_FILE" ]]; then
            echo "Last 5 log entries:"
            tail -5 "$LOG_FILE" 2>/dev/null | sed "s/^/  /"
        fi
    else
        log_warn "Agent is not running"
    fi
    
    # Show configuration info
    if [[ -f "$CONFIG_FILE" ]]; then
        echo ""
        echo "Configuration:"
        python3 -c "
import json
try:
    with open(\"$CONFIG_FILE\") as f: config = json.load(f)
    print(f\"  Server: {config.get(\"backend\", {}).get(\"server_url\", \"unknown\")}\")
    print(f\"  Update Interval: {config.get(\"agent\", {}).get(\"update_interval\", \"unknown\")}s\")
    print(f\"  Agent Name: {config.get(\"agent\", {}).get(\"name\", \"unknown\")}\")
except Exception as e: print(f\"  Error reading config: {e}\")
" 2>/dev/null
    else
        echo "No configuration file found"
    fi
}

# Logs function
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        tail -f "$LOG_FILE"
    else
        log_error "Log file not found: $LOG_FILE"
    fi
}

# Main script logic
case "$1" in
    start)
        check_root
        start_agent
        ;;
    stop)
        check_root
        stop_agent
        ;;
    restart)
        check_root
        stop_agent
        sleep 1
        start_agent
        ;;
    status)
        status_agent
        ;;
    logs)
        show_logs
        ;;
    setup)
        check_root
        interactive_setup
        ;;
    config)
        check_root
        config_editor
        ;;
    test-connection)
        test_connection
        ;;
    *)
        echo "Pankha Agent Control Script"
        echo ""
        echo "Usage: $0 {start|stop|restart|status|logs|setup|config|test-connection}"
        echo ""
        echo "Commands:"
        echo "  start           Start the agent daemon"
        echo "  stop            Stop the agent daemon"
        echo "  restart         Restart the agent daemon"
        echo "  status          Show agent status and configuration"
        echo "  logs            Show real-time agent logs"
        echo "  setup           Interactive configuration setup"
        echo "  config          Edit configuration file"
        echo "  test-connection Test hardware discovery and server connection"
        echo ""
        exit 1
        ;;
esac

exit $?
